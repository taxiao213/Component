if (Boolean.valueOf(COMPONENTA_SWITCH)) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
def support = rootProject.ext.dependencies

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        if (Boolean.valueOf(COMPONENTA_SWITCH)) {
            applicationId "com.yin.componenta"
        }
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            if (Boolean.valueOf(COMPONENTA_SWITCH)) {
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            } else {
                consumerProguardFiles 'proguard-rules.pro'
            }
        }
    }
    sourceSets{
        main{
            if (Boolean.valueOf(COMPONENTA_SWITCH)){
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }else {
                manifest.srcFile 'src/manifest/AndroidManifest.xml'
                java {
                    //  release时 debug 目录下文件不需要合并到主公程
                    exclude '**/debug/**'
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    support.each { k, v -> implementation v }
    implementation project(':library')
}
