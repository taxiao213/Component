if (Boolean.valueOf(SKIN_LIBRARY2_SWITCH)) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

def support = rootProject.ext.dependencies

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        if (Boolean.valueOf(SKIN_LIBRARY2_SWITCH)) {
            applicationId "com.component.skinlibrary2"
        }
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            if (Boolean.valueOf(SKIN_LIBRARY2_SWITCH)) {
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            } else {
                consumerProguardFiles 'proguard-rules.pro'
            }
        }
    }
    sourceSets {
        main {
            if (Boolean.valueOf(SKIN_LIBRARY2_SWITCH)) {
                //组件化
                manifest.srcFile 'src/main/AndroidManifest.xml'
            } else {
                //集成化
                manifest.srcFile 'src/mainfest/AndroidManifest.xml'
                java {
                    //  release时 debug 目录下文件不需要合并到主公程
                    exclude '**/debug/**'
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    support.each { k, v -> implementation v }
}
